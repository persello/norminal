# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  before_all do |lane, options|
    # Prepare
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "Norminal.xcodeproj"
    )

    begin
      ensure_git_status_clean
    rescue
      git_commit(path: "*")
    end

    ensure_git_status_clean

    ENV["FASTLANE_CHANGELOG"] = prompt(
      text: "Changelog: ",
      multi_line_end_keyword: "END"
    )

    # Build
    build_app(scheme: "Norminal")
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    # Distribute
    upload_to_testflight(
      groups: ["Group A", "Group B"],
      changelog: ENV["FASTLANE_CHANGELOG"]
    )
  end

  desc "Push a new alpha build to TestFlight"
  lane :alpha do
    # Distribute
    upload_to_testflight(
      groups: ["Group A"],
      changelog: ENV["FASTLANE_CHANGELOG"]
    )
  end

  after_all do |lane, options|
    # After
    add_git_tag(
      grouping: "build",
      prefix: "#{get_version_number(xcodeproj: "Norminal.xcodeproj", target: "Norminal")}.",
      includes_lane: false
    )

    push_to_git_remote

    # Crashlytics
    upload_symbols_to_crashlytics(gsp_path: "./GoogleService-Info.plist",
                                  binary_path: "Resources/Crashlytics/upload-symbols",
                                  dsym_path: "Norminal.app.dSYM.zip")

    notification(message: "The app has been distributed to the #{lane} testers.", subtitle: "Fastlane #{lane} lane complete")
  end

  error do |lane, exception, options|
    notification(message: "Lane #{lane} error: \"#{exception}\".", subtitle: "Fastlane #{lane} lane failed")
  end
end
